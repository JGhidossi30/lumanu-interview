{"ast":null,"code":"import { Octokit } from '@octokit/core';\nimport { call, put, takeLatest } from \"redux-saga/effects\";\nimport { getResultsFail, getResultsStart, getResultsSuccess } from '../actions/get-results';\nimport types from '../types';\nexport const httpCall = ({\n  query\n}) => {\n  const octokit = new Octokit({\n    auth: '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'\n  });\n  octokit.request('GET /search/repositories', {\n    q: query,\n    per_page: 20\n  }).then(response => {\n    return response.data.items;\n  });\n};\n\nfunction* getResults({\n  query\n}) {\n  try {\n    yield put(getResultsStart());\n    const results = yield call(httpCall, {\n      query\n    });\n\n    if (query !== '') {\n      const octokit = new Octokit({\n        auth: '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'\n      });\n      octokit.request('GET /search/repositories', {\n        q: query,\n        per_page: 20\n      }).then(response => {\n        getResultsSuccess(response.data.items);\n        console.log(\"what\");\n      });\n    } else {\n      getResultsSuccess([]);\n    }\n  } catch (err) {\n    yield put(getResultsFail(err));\n  }\n}\n\nexport default function* getResultsSaga() {\n  yield takeLatest(types.SET_QUERY, getResults);\n}","map":{"version":3,"sources":["/Users/JGhidossi/Downloads/lumanu-interview/src/modules/search/sagas/get-results.js"],"names":["Octokit","call","put","takeLatest","getResultsFail","getResultsStart","getResultsSuccess","types","httpCall","query","octokit","auth","request","q","per_page","then","response","data","items","getResults","results","console","log","err","getResultsSaga","SET_QUERY"],"mappings":"AAAA,SAAQA,OAAR,QAAsB,eAAtB;AACA,SAAQC,IAAR,EAAcC,GAAd,EAAmBC,UAAnB,QAAoC,oBAApC;AACA,SAAQC,cAAR,EAAwBC,eAAxB,EAAyCC,iBAAzC,QAAiE,wBAAjE;AACA,OAAOC,KAAP,MAAkB,UAAlB;AAEA,OAAO,MAAMC,QAAQ,GAAG,CAAC;AAACC,EAAAA;AAAD,CAAD,KAAa;AACjC,QAAMC,OAAO,GAAG,IAAIV,OAAJ,CAAY;AAACW,IAAAA,IAAI,EAAE;AAAP,GAAZ,CAAhB;AACAD,EAAAA,OAAO,CAACE,OAAR,CAAgB,0BAAhB,EAA4C;AACxCC,IAAAA,CAAC,EAAEJ,KADqC;AAExCK,IAAAA,QAAQ,EAAE;AAF8B,GAA5C,EAGGC,IAHH,CAGSC,QAAD,IAAc;AAClB,WAAOA,QAAQ,CAACC,IAAT,CAAcC,KAArB;AACH,GALD;AAMH,CARM;;AAUP,UAAUC,UAAV,CAAqB;AAACV,EAAAA;AAAD,CAArB,EAA8B;AAC1B,MAAI;AACA,UAAMP,GAAG,CAACG,eAAe,EAAhB,CAAT;AAEA,UAAMe,OAAO,GAAG,MAAMnB,IAAI,CAACO,QAAD,EAAW;AAACC,MAAAA;AAAD,KAAX,CAA1B;;AAGA,QAAIA,KAAK,KAAK,EAAd,EAAkB;AACd,YAAMC,OAAO,GAAG,IAAIV,OAAJ,CAAY;AAACW,QAAAA,IAAI,EAAE;AAAP,OAAZ,CAAhB;AACAD,MAAAA,OAAO,CAACE,OAAR,CAAgB,0BAAhB,EAA4C;AACxCC,QAAAA,CAAC,EAAEJ,KADqC;AAExCK,QAAAA,QAAQ,EAAE;AAF8B,OAA5C,EAGGC,IAHH,CAGSC,QAAD,IAAc;AACdV,QAAAA,iBAAiB,CAACU,QAAQ,CAACC,IAAT,CAAcC,KAAf,CAAjB;AACAG,QAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACH,OANL;AAQH,KAVD,MAUO;AACHhB,MAAAA,iBAAiB,CAAC,EAAD,CAAjB;AACH;AACJ,GAnBD,CAmBE,OAAOiB,GAAP,EAAY;AACV,UAAMrB,GAAG,CAACE,cAAc,CAACmB,GAAD,CAAf,CAAT;AACH;AACJ;;AAED,eAAe,UAAUC,cAAV,GAA2B;AACtC,QAAMrB,UAAU,CAACI,KAAK,CAACkB,SAAP,EAAkBN,UAAlB,CAAhB;AACH","sourcesContent":["import {Octokit} from '@octokit/core';\nimport {call, put, takeLatest} from \"redux-saga/effects\";\nimport {getResultsFail, getResultsStart, getResultsSuccess} from '../actions/get-results';\nimport types from '../types';\n\nexport const httpCall = ({query}) => {\n    const octokit = new Octokit({auth: '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'});\n    octokit.request('GET /search/repositories', {\n        q: query,\n        per_page: 20,\n    }).then((response) => {\n        return response.data.items;\n    });\n}\n\nfunction* getResults({query}) {\n    try {\n        yield put(getResultsStart());\n\n        const results = yield call(httpCall, {query});\n\n\n        if (query !== '') {\n            const octokit = new Octokit({auth: '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'});\n            octokit.request('GET /search/repositories', {\n                q: query,\n                per_page: 20,\n            }).then((response) => {\n                    getResultsSuccess(response.data.items);\n                    console.log(\"what\");\n                }\n            );\n        } else {\n            getResultsSuccess([]);\n        }\n    } catch (err) {\n        yield put(getResultsFail(err));\n    }\n}\n\nexport default function* getResultsSaga() {\n    yield takeLatest(types.SET_QUERY, getResults);\n}\n"]},"metadata":{},"sourceType":"module"}