{"ast":null,"code":"import { Octokit } from '@octokit/core';\nimport { call, put, takeLatest } from \"redux-saga/effects\";\nimport { getResultsFail, getResultsStart, getResultsSuccess } from '../actions/get-results';\nimport types from '../types';\nexport const httpCall = ({\n  query\n}) => {\n  const octokit = new Octokit({\n    auth: process.env.REACT_APP_AUTHORIZATION\n  });\n  return octokit.rest.search.repos({});\n  return octokit.request('GET /search/repositories', {\n    q: query,\n    per_page: 20\n  }).then(response => {\n    return response.data.items;\n  });\n};\n\nfunction* getResults({\n  query\n}) {\n  try {\n    yield put(getResultsStart());\n    let results = yield call(httpCall, {\n      query\n    });\n    yield put(getResultsSuccess(results));\n  } catch (err) {\n    yield put(getResultsFail(err));\n  }\n}\n\nexport default function* getResultsSaga() {\n  yield takeLatest(types.SET_QUERY, getResults);\n}","map":{"version":3,"sources":["/Users/JGhidossi/Downloads/lumanu-interview/src/modules/search/sagas/get-results.js"],"names":["Octokit","call","put","takeLatest","getResultsFail","getResultsStart","getResultsSuccess","types","httpCall","query","octokit","auth","process","env","REACT_APP_AUTHORIZATION","rest","search","repos","request","q","per_page","then","response","data","items","getResults","results","err","getResultsSaga","SET_QUERY"],"mappings":"AAAA,SAAQA,OAAR,QAAsB,eAAtB;AACA,SAAQC,IAAR,EAAcC,GAAd,EAAmBC,UAAnB,QAAoC,oBAApC;AACA,SAAQC,cAAR,EAAwBC,eAAxB,EAAyCC,iBAAzC,QAAiE,wBAAjE;AACA,OAAOC,KAAP,MAAkB,UAAlB;AAEA,OAAO,MAAMC,QAAQ,GAAG,CAAC;AAACC,EAAAA;AAAD,CAAD,KAAa;AACjC,QAAMC,OAAO,GAAG,IAAIV,OAAJ,CAAY;AAACW,IAAAA,IAAI,EAAEC,OAAO,CAACC,GAAR,CAAYC;AAAnB,GAAZ,CAAhB;AACA,SAAOJ,OAAO,CAACK,IAAR,CAAaC,MAAb,CAAoBC,KAApB,CAA0B,EAA1B,CAAP;AAEA,SAAOP,OAAO,CAACQ,OAAR,CAAgB,0BAAhB,EAA4C;AAC/CC,IAAAA,CAAC,EAAEV,KAD4C;AAE/CW,IAAAA,QAAQ,EAAE;AAFqC,GAA5C,EAGJC,IAHI,CAGEC,QAAD,IAAc;AAClB,WAAOA,QAAQ,CAACC,IAAT,CAAcC,KAArB;AACH,GALM,CAAP;AAMH,CAVM;;AAYP,UAAUC,UAAV,CAAqB;AAAChB,EAAAA;AAAD,CAArB,EAA8B;AAC1B,MAAI;AACA,UAAMP,GAAG,CAACG,eAAe,EAAhB,CAAT;AAEA,QAAIqB,OAAO,GAAG,MAAMzB,IAAI,CAACO,QAAD,EAAW;AAACC,MAAAA;AAAD,KAAX,CAAxB;AAEA,UAAMP,GAAG,CAACI,iBAAiB,CAACoB,OAAD,CAAlB,CAAT;AACH,GAND,CAME,OAAOC,GAAP,EAAY;AACV,UAAMzB,GAAG,CAACE,cAAc,CAACuB,GAAD,CAAf,CAAT;AACH;AACJ;;AAED,eAAe,UAAUC,cAAV,GAA2B;AACtC,QAAMzB,UAAU,CAACI,KAAK,CAACsB,SAAP,EAAkBJ,UAAlB,CAAhB;AACH","sourcesContent":["import {Octokit} from '@octokit/core';\nimport {call, put, takeLatest} from \"redux-saga/effects\";\nimport {getResultsFail, getResultsStart, getResultsSuccess} from '../actions/get-results';\nimport types from '../types';\n\nexport const httpCall = ({query}) => {\n    const octokit = new Octokit({auth: process.env.REACT_APP_AUTHORIZATION});\n    return octokit.rest.search.repos({});\n\n    return octokit.request('GET /search/repositories', {\n        q: query,\n        per_page: 20,\n    }).then((response) => {\n        return response.data.items;\n    });\n}\n\nfunction* getResults({query}) {\n    try {\n        yield put(getResultsStart());\n\n        let results = yield call(httpCall, {query});\n\n        yield put(getResultsSuccess(results));\n    } catch (err) {\n        yield put(getResultsFail(err));\n    }\n}\n\nexport default function* getResultsSaga() {\n    yield takeLatest(types.SET_QUERY, getResults);\n}\n"]},"metadata":{},"sourceType":"module"}