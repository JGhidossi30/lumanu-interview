{"ast":null,"code":"import { Octokit } from '@octokit/core';\nimport { call, put, takeLatest } from \"redux-saga/effects\";\nimport { getResultsFail, getResultsStart, getResultsSuccess } from '../actions/get-results';\nimport types from '../types';\nexport const httpCall = ({\n  query\n}) => {\n  const octokit = new Octokit({\n    auth: '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'\n  });\n  octokit.request('GET /search/repositories', {\n    q: query,\n    per_page: 20\n  }).then(response => {\n    console.log(response);\n    return response.data.items;\n  });\n};\n\nfunction* getResults({\n  query\n}) {\n  try {\n    yield put(getResultsStart());\n    const results = query !== '' ? yield call(httpCall, {\n      query\n    }) : [];\n    yield put(getResultsSuccess(results));\n  } catch (err) {\n    yield put(getResultsFail(err));\n  }\n}\n\nexport default function* getResultsSaga() {\n  yield takeLatest(types.SET_QUERY, getResults);\n}","map":{"version":3,"sources":["/Users/JGhidossi/Downloads/lumanu-interview/src/modules/search/sagas/get-results.js"],"names":["Octokit","call","put","takeLatest","getResultsFail","getResultsStart","getResultsSuccess","types","httpCall","query","octokit","auth","request","q","per_page","then","response","console","log","data","items","getResults","results","err","getResultsSaga","SET_QUERY"],"mappings":"AAAA,SAAQA,OAAR,QAAsB,eAAtB;AACA,SAAQC,IAAR,EAAcC,GAAd,EAAmBC,UAAnB,QAAoC,oBAApC;AACA,SAAQC,cAAR,EAAwBC,eAAxB,EAAyCC,iBAAzC,QAAiE,wBAAjE;AACA,OAAOC,KAAP,MAAkB,UAAlB;AAEA,OAAO,MAAMC,QAAQ,GAAG,CAAC;AAACC,EAAAA;AAAD,CAAD,KAAa;AACjC,QAAMC,OAAO,GAAG,IAAIV,OAAJ,CAAY;AAACW,IAAAA,IAAI,EAAE;AAAP,GAAZ,CAAhB;AACAD,EAAAA,OAAO,CAACE,OAAR,CAAgB,0BAAhB,EAA4C;AACxCC,IAAAA,CAAC,EAAEJ,KADqC;AAExCK,IAAAA,QAAQ,EAAE;AAF8B,GAA5C,EAGGC,IAHH,CAGSC,QAAD,IAAc;AAClBC,IAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AACA,WAAOA,QAAQ,CAACG,IAAT,CAAcC,KAArB;AACH,GAND;AAOH,CATM;;AAWP,UAAUC,UAAV,CAAqB;AAACZ,EAAAA;AAAD,CAArB,EAA8B;AAC1B,MAAI;AACA,UAAMP,GAAG,CAACG,eAAe,EAAhB,CAAT;AAEA,UAAMiB,OAAO,GAAGb,KAAK,KAAK,EAAV,GAAe,MAAMR,IAAI,CAACO,QAAD,EAAW;AAACC,MAAAA;AAAD,KAAX,CAAzB,GAA+C,EAA/D;AAEA,UAAMP,GAAG,CAACI,iBAAiB,CAACgB,OAAD,CAAlB,CAAT;AACH,GAND,CAME,OAAOC,GAAP,EAAY;AACV,UAAMrB,GAAG,CAACE,cAAc,CAACmB,GAAD,CAAf,CAAT;AACH;AACJ;;AAED,eAAe,UAAUC,cAAV,GAA2B;AACtC,QAAMrB,UAAU,CAACI,KAAK,CAACkB,SAAP,EAAkBJ,UAAlB,CAAhB;AACH","sourcesContent":["import {Octokit} from '@octokit/core';\nimport {call, put, takeLatest} from \"redux-saga/effects\";\nimport {getResultsFail, getResultsStart, getResultsSuccess} from '../actions/get-results';\nimport types from '../types';\n\nexport const httpCall = ({query}) => {\n    const octokit = new Octokit({auth: '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'});\n    octokit.request('GET /search/repositories', {\n        q: query,\n        per_page: 20,\n    }).then((response) => {\n        console.log(response);\n        return response.data.items;\n    });\n}\n\nfunction* getResults({query}) {\n    try {\n        yield put(getResultsStart());\n\n        const results = query !== '' ? yield call(httpCall, {query}) : [];\n\n        yield put(getResultsSuccess(results));\n    } catch (err) {\n        yield put(getResultsFail(err));\n    }\n}\n\nexport default function* getResultsSaga() {\n    yield takeLatest(types.SET_QUERY, getResults);\n}\n"]},"metadata":{},"sourceType":"module"}