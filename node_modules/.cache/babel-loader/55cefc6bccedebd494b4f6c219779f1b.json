{"ast":null,"code":"import { Octokit } from '@octokit/core';\nimport { call, put, takeLatest } from \"redux-saga/effects\";\nimport { getLatestReleaseFail, getLatestReleaseStart, getLatestReleaseSuccess } from '../actions/get-latest-release';\nimport types from '../types';\nexport const httpCall = ({\n  owner,\n  repo\n}) => {\n  const octokit = new Octokit({\n    auth: process.env.REACT_APP_AUTHORIZATION\n  });\n  return octokit.request('GET /repos/{owner}/{repo}/releases/latest', {\n    owner,\n    repo\n  }).then(response => {\n    console.log(response);\n    return response.body;\n  }).catch(err => console.log(`Error retrieving release notes for '${repo}'\\n\\n${err}`));\n};\n\nfunction* getLatestRelease({\n  owner,\n  repo\n}) {\n  try {\n    yield put(getLatestReleaseStart());\n    let results = yield call(httpCall, {\n      owner,\n      repo\n    });\n    yield put(getLatestReleaseSuccess(results));\n  } catch (err) {\n    yield put(getLatestReleaseFail(err));\n  }\n}\n\nexport default function* getLatestReleaseSaga() {\n  yield takeLatest(types.GET_LATEST_RELEASE, getLatestRelease);\n}","map":{"version":3,"sources":["/Users/JGhidossi/Downloads/lumanu-interview/src/modules/search/sagas/get-latest-release.js"],"names":["Octokit","call","put","takeLatest","getLatestReleaseFail","getLatestReleaseStart","getLatestReleaseSuccess","types","httpCall","owner","repo","octokit","auth","process","env","REACT_APP_AUTHORIZATION","request","then","response","console","log","body","catch","err","getLatestRelease","results","getLatestReleaseSaga","GET_LATEST_RELEASE"],"mappings":"AAAA,SAAQA,OAAR,QAAsB,eAAtB;AACA,SAAQC,IAAR,EAAcC,GAAd,EAAmBC,UAAnB,QAAoC,oBAApC;AACA,SAAQC,oBAAR,EAA8BC,qBAA9B,EAAqDC,uBAArD,QAAmF,+BAAnF;AACA,OAAOC,KAAP,MAAkB,UAAlB;AAEA,OAAO,MAAMC,QAAQ,GAAG,CAAC;AAACC,EAAAA,KAAD;AAAQC,EAAAA;AAAR,CAAD,KAAmB;AACvC,QAAMC,OAAO,GAAG,IAAIX,OAAJ,CAAY;AAACY,IAAAA,IAAI,EAAEC,OAAO,CAACC,GAAR,CAAYC;AAAnB,GAAZ,CAAhB;AACA,SAAOJ,OAAO,CAACK,OAAR,CAAgB,2CAAhB,EAA6D;AAChEP,IAAAA,KADgE;AAEhEC,IAAAA;AAFgE,GAA7D,EAGJO,IAHI,CAGEC,QAAD,IAAc;AAClBC,IAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AACA,WAAOA,QAAQ,CAACG,IAAhB;AACH,GANM,EAMJC,KANI,CAMGC,GAAD,IAASJ,OAAO,CAACC,GAAR,CAAa,uCAAsCV,IAAK,QAAOa,GAAI,EAAnE,CANX,CAAP;AAOH,CATM;;AAWP,UAAUC,gBAAV,CAA2B;AAACf,EAAAA,KAAD;AAAQC,EAAAA;AAAR,CAA3B,EAA0C;AACtC,MAAI;AACA,UAAMR,GAAG,CAACG,qBAAqB,EAAtB,CAAT;AAEA,QAAIoB,OAAO,GAAG,MAAMxB,IAAI,CAACO,QAAD,EAAW;AAACC,MAAAA,KAAD;AAAQC,MAAAA;AAAR,KAAX,CAAxB;AAEA,UAAMR,GAAG,CAACI,uBAAuB,CAACmB,OAAD,CAAxB,CAAT;AACH,GAND,CAME,OAAOF,GAAP,EAAY;AACV,UAAMrB,GAAG,CAACE,oBAAoB,CAACmB,GAAD,CAArB,CAAT;AACH;AACJ;;AAED,eAAe,UAAUG,oBAAV,GAAiC;AAC5C,QAAMvB,UAAU,CAACI,KAAK,CAACoB,kBAAP,EAA2BH,gBAA3B,CAAhB;AACH","sourcesContent":["import {Octokit} from '@octokit/core';\nimport {call, put, takeLatest} from \"redux-saga/effects\";\nimport {getLatestReleaseFail, getLatestReleaseStart, getLatestReleaseSuccess} from '../actions/get-latest-release';\nimport types from '../types';\n\nexport const httpCall = ({owner, repo}) => {\n    const octokit = new Octokit({auth: process.env.REACT_APP_AUTHORIZATION});\n    return octokit.request('GET /repos/{owner}/{repo}/releases/latest', {\n        owner,\n        repo,\n    }).then((response) => {\n        console.log(response)\n        return response.body;\n    }).catch((err) => console.log(`Error retrieving release notes for '${repo}'\\n\\n${err}`));\n}\n\nfunction* getLatestRelease({owner, repo}) {\n    try {\n        yield put(getLatestReleaseStart());\n\n        let results = yield call(httpCall, {owner, repo});\n\n        yield put(getLatestReleaseSuccess(results));\n    } catch (err) {\n        yield put(getLatestReleaseFail(err));\n    }\n}\n\nexport default function* getLatestReleaseSaga() {\n    yield takeLatest(types.GET_LATEST_RELEASE, getLatestRelease);\n}\n"]},"metadata":{},"sourceType":"module"}