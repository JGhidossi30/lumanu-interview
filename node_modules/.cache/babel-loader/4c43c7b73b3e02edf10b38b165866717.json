{"ast":null,"code":"import { Octokit } from '@octokit/core';\nimport { call, put, takeLatest } from \"redux-saga/effects\";\nimport { getResultsFail, getResultsStart, getResultsSuccess } from '../actions/get-results';\nimport types from '../types';\nexport const httpCall = ({\n  query\n}) => {\n  let results = [];\n  const octokit = new Octokit({\n    auth: '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'\n  });\n  octokit.request('GET /search/repositories', {\n    q: query,\n    per_page: 20\n  }).then(response => {\n    results = response.data.items;\n  });\n  return results;\n};\n\nfunction* getResults({\n  query\n}) {\n  try {\n    yield put(getResultsStart());\n    let results = yield call(httpCall, {\n      query\n    });\n    yield put(getResultsSuccess(results));\n  } catch (err) {\n    yield put(getResultsFail(err));\n  }\n}\n\nexport default function* getResultsSaga() {\n  yield takeLatest(types.SET_QUERY, getResults);\n}","map":{"version":3,"sources":["/Users/JGhidossi/Downloads/lumanu-interview/src/modules/search/sagas/get-results.js"],"names":["Octokit","call","put","takeLatest","getResultsFail","getResultsStart","getResultsSuccess","types","httpCall","query","results","octokit","auth","request","q","per_page","then","response","data","items","getResults","err","getResultsSaga","SET_QUERY"],"mappings":"AAAA,SAAQA,OAAR,QAAsB,eAAtB;AACA,SAAQC,IAAR,EAAcC,GAAd,EAAmBC,UAAnB,QAAoC,oBAApC;AACA,SAAQC,cAAR,EAAwBC,eAAxB,EAAyCC,iBAAzC,QAAiE,wBAAjE;AACA,OAAOC,KAAP,MAAkB,UAAlB;AAEA,OAAO,MAAMC,QAAQ,GAAG,CAAC;AAACC,EAAAA;AAAD,CAAD,KAAa;AACjC,MAAIC,OAAO,GAAG,EAAd;AAEA,QAAMC,OAAO,GAAG,IAAIX,OAAJ,CAAY;AAACY,IAAAA,IAAI,EAAE;AAAP,GAAZ,CAAhB;AACAD,EAAAA,OAAO,CAACE,OAAR,CAAgB,0BAAhB,EAA4C;AACxCC,IAAAA,CAAC,EAAEL,KADqC;AAExCM,IAAAA,QAAQ,EAAE;AAF8B,GAA5C,EAGGC,IAHH,CAGSC,QAAD,IAAc;AAClBP,IAAAA,OAAO,GAAGO,QAAQ,CAACC,IAAT,CAAcC,KAAxB;AACH,GALD;AAOA,SAAOT,OAAP;AACH,CAZM;;AAcP,UAAUU,UAAV,CAAqB;AAACX,EAAAA;AAAD,CAArB,EAA8B;AAC1B,MAAI;AACA,UAAMP,GAAG,CAACG,eAAe,EAAhB,CAAT;AAEA,QAAIK,OAAO,GAAG,MAAMT,IAAI,CAACO,QAAD,EAAW;AAACC,MAAAA;AAAD,KAAX,CAAxB;AAEA,UAAMP,GAAG,CAACI,iBAAiB,CAACI,OAAD,CAAlB,CAAT;AACH,GAND,CAME,OAAOW,GAAP,EAAY;AACV,UAAMnB,GAAG,CAACE,cAAc,CAACiB,GAAD,CAAf,CAAT;AACH;AACJ;;AAED,eAAe,UAAUC,cAAV,GAA2B;AACtC,QAAMnB,UAAU,CAACI,KAAK,CAACgB,SAAP,EAAkBH,UAAlB,CAAhB;AACH","sourcesContent":["import {Octokit} from '@octokit/core';\nimport {call, put, takeLatest} from \"redux-saga/effects\";\nimport {getResultsFail, getResultsStart, getResultsSuccess} from '../actions/get-results';\nimport types from '../types';\n\nexport const httpCall = ({query}) => {\n    let results = [];\n\n    const octokit = new Octokit({auth: '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'});\n    octokit.request('GET /search/repositories', {\n        q: query,\n        per_page: 20,\n    }).then((response) => {\n        results = response.data.items;\n    });\n\n    return results;\n}\n\nfunction* getResults({query}) {\n    try {\n        yield put(getResultsStart());\n\n        let results = yield call(httpCall, {query});\n\n        yield put(getResultsSuccess(results));\n    } catch (err) {\n        yield put(getResultsFail(err));\n    }\n}\n\nexport default function* getResultsSaga() {\n    yield takeLatest(types.SET_QUERY, getResults);\n}\n"]},"metadata":{},"sourceType":"module"}