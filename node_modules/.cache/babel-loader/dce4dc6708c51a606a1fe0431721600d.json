{"ast":null,"code":"import types from '../types';\nexport const getResultsStart = state => ({ ...state,\n  loaders: { ...state.loaders,\n    queryLoading: true\n  }\n});\nexport const getResultsSuccess = (state, {\n  results\n}) => {\n  const newResults = results.filter(result => {\n    return state.repos.some(repo => {\n      console.log(repo.id);\n      console.log(result.id);\n      return repo.id !== result.id;\n    }); // console.log(state.repos)\n    // console.log(result)\n    // console.log(!state.repos.includes(result))\n    // return !state.repos.includes(result)\n  });\n  console.log(newResults);\n  return { ...state,\n    loaders: { ...state.loaders,\n      queryLoading: false\n    },\n    results: newResults\n  };\n};\nexport const getResultsFail = (state, {\n  error\n}) => ({ ...state,\n  loaders: { ...state.loaders,\n    queryLoading: false\n  },\n  results: [],\n  error\n});\nexport default {\n  [types.GET_RESULTS_START]: getResultsStart,\n  [types.GET_RESULTS_SUCCESS]: getResultsSuccess,\n  [types.GET_RESULTS_FAIL]: getResultsFail\n};","map":{"version":3,"sources":["/Users/JGhidossi/Downloads/lumanu-interview/src/modules/search/reducer/get-results.js"],"names":["types","getResultsStart","state","loaders","queryLoading","getResultsSuccess","results","newResults","filter","result","repos","some","repo","console","log","id","getResultsFail","error","GET_RESULTS_START","GET_RESULTS_SUCCESS","GET_RESULTS_FAIL"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,UAAlB;AAEA,OAAO,MAAMC,eAAe,GAAIC,KAAD,KAAY,EACvC,GAAGA,KADoC;AAEvCC,EAAAA,OAAO,EAAE,EACL,GAAGD,KAAK,CAACC,OADJ;AAELC,IAAAA,YAAY,EAAE;AAFT;AAF8B,CAAZ,CAAxB;AAQP,OAAO,MAAMC,iBAAiB,GAAG,CAACH,KAAD,EAAQ;AAACI,EAAAA;AAAD,CAAR,KAAsB;AACnD,QAAMC,UAAU,GAAGD,OAAO,CAACE,MAAR,CAAgBC,MAAD,IAAY;AAC1C,WAAOP,KAAK,CAACQ,KAAN,CAAYC,IAAZ,CAAkBC,IAAD,IAAU;AAC9BC,MAAAA,OAAO,CAACC,GAAR,CAAYF,IAAI,CAACG,EAAjB;AACAF,MAAAA,OAAO,CAACC,GAAR,CAAYL,MAAM,CAACM,EAAnB;AACA,aAAOH,IAAI,CAACG,EAAL,KAAYN,MAAM,CAACM,EAA1B;AACH,KAJM,CAAP,CAD0C,CAM1C;AACA;AACA;AACA;AACH,GAVkB,CAAnB;AAWAF,EAAAA,OAAO,CAACC,GAAR,CAAYP,UAAZ;AACA,SAAQ,EACJ,GAAGL,KADC;AAEJC,IAAAA,OAAO,EAAE,EACL,GAAGD,KAAK,CAACC,OADJ;AAELC,MAAAA,YAAY,EAAE;AAFT,KAFL;AAMJE,IAAAA,OAAO,EAAEC;AANL,GAAR;AAQH,CArBM;AAuBP,OAAO,MAAMS,cAAc,GAAG,CAACd,KAAD,EAAQ;AAACe,EAAAA;AAAD,CAAR,MAAqB,EAC/C,GAAGf,KAD4C;AAE/CC,EAAAA,OAAO,EAAE,EACL,GAAGD,KAAK,CAACC,OADJ;AAELC,IAAAA,YAAY,EAAE;AAFT,GAFsC;AAM/CE,EAAAA,OAAO,EAAE,EANsC;AAO/CW,EAAAA;AAP+C,CAArB,CAAvB;AAUP,eAAe;AACX,GAACjB,KAAK,CAACkB,iBAAP,GAA2BjB,eADhB;AAEX,GAACD,KAAK,CAACmB,mBAAP,GAA6Bd,iBAFlB;AAGX,GAACL,KAAK,CAACoB,gBAAP,GAA0BJ;AAHf,CAAf","sourcesContent":["import types from '../types';\n\nexport const getResultsStart = (state) => ({\n    ...state,\n    loaders: {\n        ...state.loaders,\n        queryLoading: true,\n    },\n});\n\nexport const getResultsSuccess = (state, {results}) => {\n    const newResults = results.filter((result) => {\n        return state.repos.some((repo) => {\n            console.log(repo.id);\n            console.log(result.id);\n            return repo.id !== result.id;\n        });\n        // console.log(state.repos)\n        // console.log(result)\n        // console.log(!state.repos.includes(result))\n        // return !state.repos.includes(result)\n    });\n    console.log(newResults);\n    return ({\n        ...state,\n        loaders: {\n            ...state.loaders,\n            queryLoading: false,\n        },\n        results: newResults,\n    });\n}\n\nexport const getResultsFail = (state, {error}) => ({\n    ...state,\n    loaders: {\n        ...state.loaders,\n        queryLoading: false,\n    },\n    results: [],\n    error,\n});\n\nexport default {\n    [types.GET_RESULTS_START]: getResultsStart,\n    [types.GET_RESULTS_SUCCESS]: getResultsSuccess,\n    [types.GET_RESULTS_FAIL]: getResultsFail,\n};\n"]},"metadata":{},"sourceType":"module"}