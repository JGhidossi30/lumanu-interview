{"ast":null,"code":"import { Octokit } from '@octokit/core';\nimport { call, put, takeLatest } from \"redux-saga/effects\";\nimport { getResultsFail, getResultsStart, getResultsSuccess } from '../actions/get-results';\nimport types from '../types';\nexport const httpCall = ({\n  query\n}) => {\n  const octokit = new Octokit({\n    auth: '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'\n  });\n  return octokit.request('GET /search/repositories', {\n    q: query,\n    per_page: 20\n  }).then(response => {\n    return response.data.items;\n  }).catch(err => console.log(`Error retrieving repos for '${query}'\\n\\n${err}`));\n};\n\nfunction* getResults({\n  query\n}) {\n  try {\n    yield put(getResultsStart());\n    let results = yield call(httpCall, {\n      query\n    });\n    yield put(getResultsSuccess(results));\n  } catch (err) {\n    yield put(getResultsFail(err));\n  }\n}\n\nexport default function* getResultsSaga() {\n  yield takeLatest(types.SET_QUERY, getResults);\n}","map":{"version":3,"sources":["/Users/JGhidossi/Downloads/lumanu-interview/src/modules/search/sagas/get-results.js"],"names":["Octokit","call","put","takeLatest","getResultsFail","getResultsStart","getResultsSuccess","types","httpCall","query","octokit","auth","request","q","per_page","then","response","data","items","catch","err","console","log","getResults","results","getResultsSaga","SET_QUERY"],"mappings":"AAAA,SAAQA,OAAR,QAAsB,eAAtB;AACA,SAAQC,IAAR,EAAcC,GAAd,EAAmBC,UAAnB,QAAoC,oBAApC;AACA,SAAQC,cAAR,EAAwBC,eAAxB,EAAyCC,iBAAzC,QAAiE,wBAAjE;AACA,OAAOC,KAAP,MAAkB,UAAlB;AAEA,OAAO,MAAMC,QAAQ,GAAG,CAAC;AAACC,EAAAA;AAAD,CAAD,KAAa;AACjC,QAAMC,OAAO,GAAG,IAAIV,OAAJ,CAAY;AAACW,IAAAA,IAAI,EAAE;AAAP,GAAZ,CAAhB;AACA,SAAOD,OAAO,CAACE,OAAR,CAAgB,0BAAhB,EAA4C;AAC/CC,IAAAA,CAAC,EAAEJ,KAD4C;AAE/CK,IAAAA,QAAQ,EAAE;AAFqC,GAA5C,EAGJC,IAHI,CAGEC,QAAD,IAAc;AAClB,WAAOA,QAAQ,CAACC,IAAT,CAAcC,KAArB;AACH,GALM,EAKJC,KALI,CAKGC,GAAD,IAASC,OAAO,CAACC,GAAR,CAAa,+BAA8Bb,KAAM,QAAOW,GAAI,EAA5D,CALX,CAAP;AAMH,CARM;;AAUP,UAAUG,UAAV,CAAqB;AAACd,EAAAA;AAAD,CAArB,EAA8B;AAC1B,MAAI;AACA,UAAMP,GAAG,CAACG,eAAe,EAAhB,CAAT;AAEA,QAAImB,OAAO,GAAG,MAAMvB,IAAI,CAACO,QAAD,EAAW;AAACC,MAAAA;AAAD,KAAX,CAAxB;AAEA,UAAMP,GAAG,CAACI,iBAAiB,CAACkB,OAAD,CAAlB,CAAT;AACH,GAND,CAME,OAAOJ,GAAP,EAAY;AACV,UAAMlB,GAAG,CAACE,cAAc,CAACgB,GAAD,CAAf,CAAT;AACH;AACJ;;AAED,eAAe,UAAUK,cAAV,GAA2B;AACtC,QAAMtB,UAAU,CAACI,KAAK,CAACmB,SAAP,EAAkBH,UAAlB,CAAhB;AACH","sourcesContent":["import {Octokit} from '@octokit/core';\nimport {call, put, takeLatest} from \"redux-saga/effects\";\nimport {getResultsFail, getResultsStart, getResultsSuccess} from '../actions/get-results';\nimport types from '../types';\n\nexport const httpCall = ({query}) => {\n    const octokit = new Octokit({auth: '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'});\n    return octokit.request('GET /search/repositories', {\n        q: query,\n        per_page: 20,\n    }).then((response) => {\n        return response.data.items;\n    }).catch((err) => console.log(`Error retrieving repos for '${query}'\\n\\n${err}`));\n}\n\nfunction* getResults({query}) {\n    try {\n        yield put(getResultsStart());\n\n        let results = yield call(httpCall, {query});\n\n        yield put(getResultsSuccess(results));\n    } catch (err) {\n        yield put(getResultsFail(err));\n    }\n}\n\nexport default function* getResultsSaga() {\n    yield takeLatest(types.SET_QUERY, getResults);\n}\n"]},"metadata":{},"sourceType":"module"}