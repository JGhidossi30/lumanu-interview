{"ast":null,"code":"import { Octokit } from '@octokit/core';\nimport { call, put, takeLatest } from \"redux-saga/effects\";\nimport { refreshPageFail, refreshPageStart, refreshPageSuccess } from '../actions/refresh-page';\nimport types from '../types';\nexport const httpCall = ({\n  owner,\n  repo\n}) => {\n  const octokit = new Octokit({\n    auth: process.env.REACT_APP_AUTHORIZATION\n  });\n  return octokit.request('GET /repos/{owner}/{repo}/releases/latest', {\n    owner,\n    repo\n  }).then(response => {\n    return response.data;\n  });\n};\n\nfunction* refreshPage({\n  repos\n}) {\n  try {\n    yield put(refreshPageStart());\n    let newReleases = [];\n\n    for (let i = 0; i < repos.length; ++i) {\n      const owner = repos[i].data.owner.login;\n      const repo = repos[i].data.name;\n      let result = yield call(httpCall, {\n        owner,\n        repo\n      });\n      newReleases.push(result);\n    }\n\n    yield put(refreshPageSuccess(newReleases));\n  } catch (err) {\n    yield put(refreshPageFail(err));\n  }\n}\n\nexport default function* refreshPageSaga() {\n  yield takeLatest(types.REFRESH_PAGE, refreshPage);\n}","map":{"version":3,"sources":["/Users/JGhidossi/Downloads/lumanu-interview/src/modules/search/sagas/refresh-page.js"],"names":["Octokit","call","put","takeLatest","refreshPageFail","refreshPageStart","refreshPageSuccess","types","httpCall","owner","repo","octokit","auth","process","env","REACT_APP_AUTHORIZATION","request","then","response","data","refreshPage","repos","newReleases","i","length","login","name","result","push","err","refreshPageSaga","REFRESH_PAGE"],"mappings":"AAAA,SAAQA,OAAR,QAAsB,eAAtB;AACA,SAAQC,IAAR,EAAcC,GAAd,EAAmBC,UAAnB,QAAoC,oBAApC;AACA,SAAQC,eAAR,EAAyBC,gBAAzB,EAA2CC,kBAA3C,QAAoE,yBAApE;AACA,OAAOC,KAAP,MAAkB,UAAlB;AAEA,OAAO,MAAMC,QAAQ,GAAG,CAAC;AAACC,EAAAA,KAAD;AAAQC,EAAAA;AAAR,CAAD,KAAmB;AACvC,QAAMC,OAAO,GAAG,IAAIX,OAAJ,CAAY;AAACY,IAAAA,IAAI,EAAEC,OAAO,CAACC,GAAR,CAAYC;AAAnB,GAAZ,CAAhB;AACA,SAAOJ,OAAO,CAACK,OAAR,CAAgB,2CAAhB,EAA6D;AAChEP,IAAAA,KADgE;AAEhEC,IAAAA;AAFgE,GAA7D,EAGJO,IAHI,CAGEC,QAAD,IAAc;AAClB,WAAOA,QAAQ,CAACC,IAAhB;AACH,GALM,CAAP;AAMH,CARM;;AAUP,UAAUC,WAAV,CAAsB;AAACC,EAAAA;AAAD,CAAtB,EAA+B;AAC3B,MAAI;AACA,UAAMnB,GAAG,CAACG,gBAAgB,EAAjB,CAAT;AAEA,QAAIiB,WAAW,GAAG,EAAlB;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,KAAK,CAACG,MAA1B,EAAkC,EAAED,CAApC,EAAuC;AACnC,YAAMd,KAAK,GAAGY,KAAK,CAACE,CAAD,CAAL,CAASJ,IAAT,CAAcV,KAAd,CAAoBgB,KAAlC;AACA,YAAMf,IAAI,GAAGW,KAAK,CAACE,CAAD,CAAL,CAASJ,IAAT,CAAcO,IAA3B;AACA,UAAIC,MAAM,GAAG,MAAM1B,IAAI,CAACO,QAAD,EAAW;AAACC,QAAAA,KAAD;AAAQC,QAAAA;AAAR,OAAX,CAAvB;AACAY,MAAAA,WAAW,CAACM,IAAZ,CAAiBD,MAAjB;AACH;;AAED,UAAMzB,GAAG,CAACI,kBAAkB,CAACgB,WAAD,CAAnB,CAAT;AACH,GAZD,CAYE,OAAOO,GAAP,EAAY;AACV,UAAM3B,GAAG,CAACE,eAAe,CAACyB,GAAD,CAAhB,CAAT;AACH;AACJ;;AAED,eAAe,UAAUC,eAAV,GAA4B;AACvC,QAAM3B,UAAU,CAACI,KAAK,CAACwB,YAAP,EAAqBX,WAArB,CAAhB;AACH","sourcesContent":["import {Octokit} from '@octokit/core';\nimport {call, put, takeLatest} from \"redux-saga/effects\";\nimport {refreshPageFail, refreshPageStart, refreshPageSuccess} from '../actions/refresh-page';\nimport types from '../types';\n\nexport const httpCall = ({owner, repo}) => {\n    const octokit = new Octokit({auth: process.env.REACT_APP_AUTHORIZATION});\n    return octokit.request('GET /repos/{owner}/{repo}/releases/latest', {\n        owner,\n        repo,\n    }).then((response) => {\n        return response.data;\n    });\n}\n\nfunction* refreshPage({repos}) {\n    try {\n        yield put(refreshPageStart());\n\n        let newReleases = [];\n        for (let i = 0; i < repos.length; ++i) {\n            const owner = repos[i].data.owner.login;\n            const repo = repos[i].data.name;\n            let result = yield call(httpCall, {owner, repo});\n            newReleases.push(result);\n        }\n\n        yield put(refreshPageSuccess(newReleases));\n    } catch (err) {\n        yield put(refreshPageFail(err));\n    }\n}\n\nexport default function* refreshPageSaga() {\n    yield takeLatest(types.REFRESH_PAGE, refreshPage);\n}\n"]},"metadata":{},"sourceType":"module"}