{"ast":null,"code":"import { Octokit } from '@octokit/core';\nimport { put, takeLatest } from \"redux-saga/effects\";\nimport { setQueryFail, setQueryStart, setQuerySuccess } from '../actions/set-query';\nimport types from '../types';\n\nfunction* setQuery({\n  query\n}) {\n  try {\n    yield put(setQueryStart());\n\n    if (query !== '') {\n      const octokit = new Octokit({\n        auth: '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'\n      });\n      octokit.request('GET /search/repositories', {\n        q: query,\n        per_page: 20\n      }).then(response => setQuerySuccess(response.data.items));\n    } else {\n      setQuerySuccess([]);\n    }\n  } catch (err) {\n    yield put(setQueryFail());\n  }\n}\n\nexport default function* setQuerySaga() {\n  yield takeLatest(types.SET_QUERY, setQuery);\n}","map":{"version":3,"sources":["/Users/JGhidossi/Downloads/lumanu-interview/src/modules/search/sagas/set-query.js"],"names":["Octokit","put","takeLatest","setQueryFail","setQueryStart","setQuerySuccess","types","setQuery","query","octokit","auth","request","q","per_page","then","response","data","items","err","setQuerySaga","SET_QUERY"],"mappings":"AAAA,SAAQA,OAAR,QAAsB,eAAtB;AACA,SAAQC,GAAR,EAAaC,UAAb,QAA8B,oBAA9B;AACA,SAAQC,YAAR,EAAsBC,aAAtB,EAAqCC,eAArC,QAA2D,sBAA3D;AACA,OAAOC,KAAP,MAAkB,UAAlB;;AAEA,UAAUC,QAAV,CAAmB;AAACC,EAAAA;AAAD,CAAnB,EAA4B;AACxB,MAAI;AACA,UAAMP,GAAG,CAACG,aAAa,EAAd,CAAT;;AAEA,QAAII,KAAK,KAAK,EAAd,EAAkB;AACd,YAAMC,OAAO,GAAG,IAAIT,OAAJ,CAAY;AAACU,QAAAA,IAAI,EAAE;AAAP,OAAZ,CAAhB;AACAD,MAAAA,OAAO,CAACE,OAAR,CAAgB,0BAAhB,EAA4C;AACxCC,QAAAA,CAAC,EAAEJ,KADqC;AAExCK,QAAAA,QAAQ,EAAE;AAF8B,OAA5C,EAGGC,IAHH,CAGSC,QAAD,IAAcV,eAAe,CAACU,QAAQ,CAACC,IAAT,CAAcC,KAAf,CAHrC;AAIH,KAND,MAMO;AACHZ,MAAAA,eAAe,CAAC,EAAD,CAAf;AACH;AACJ,GAZD,CAYE,OAAOa,GAAP,EAAY;AACV,UAAMjB,GAAG,CAACE,YAAY,EAAb,CAAT;AACH;AACJ;;AAED,eAAe,UAAUgB,YAAV,GAAyB;AACpC,QAAMjB,UAAU,CAACI,KAAK,CAACc,SAAP,EAAkBb,QAAlB,CAAhB;AACH","sourcesContent":["import {Octokit} from '@octokit/core';\nimport {put, takeLatest} from \"redux-saga/effects\";\nimport {setQueryFail, setQueryStart, setQuerySuccess} from '../actions/set-query';\nimport types from '../types';\n\nfunction* setQuery({query}) {\n    try {\n        yield put(setQueryStart());\n\n        if (query !== '') {\n            const octokit = new Octokit({auth: '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'});\n            octokit.request('GET /search/repositories', {\n                q: query,\n                per_page: 20,\n            }).then((response) => setQuerySuccess(response.data.items));\n        } else {\n            setQuerySuccess([]);\n        }\n    } catch (err) {\n        yield put(setQueryFail());\n    }\n}\n\nexport default function* setQuerySaga() {\n    yield takeLatest(types.SET_QUERY, setQuery);\n}\n"]},"metadata":{},"sourceType":"module"}