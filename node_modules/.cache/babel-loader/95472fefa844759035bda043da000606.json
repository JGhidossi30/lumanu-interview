{"ast":null,"code":"var _JSON$parse;\n\nimport getLatestReleaseReducer from './reducer/get-latest-release';\nimport getResultsReducer from './reducer/get-results';\nimport types from './types';\nconst initialState = {\n  loaders: {\n    releaseLoading: false,\n    queryLoading: false\n  },\n  releaseNotes: null,\n  repos: (_JSON$parse = JSON.parse(localStorage.getItem('repos'))) !== null && _JSON$parse !== void 0 ? _JSON$parse : [],\n  results: [],\n  query: ''\n};\nexport const addRepo = (state, {\n  repo\n}) => {\n  const repos = [...state.repos, {\n    data: repo\n  }];\n  localStorage.setItem('repos', JSON.stringify(repos));\n  return { ...state,\n    repos\n  };\n};\nexport const removeRepo = (state, {\n  index\n}) => {\n  const repos = [...state.repos.slice(0, index), ...state.repos.slice(index + 1)];\n  localStorage.setItem('repos', JSON.stringify(repos));\n  return { ...state,\n    repos\n  };\n};\nexport const setReleaseNotes = (state, {\n  index\n}) => ({ ...state,\n  releaseNotes: state.repos[index].notes.body\n});\nexport const setQuery = (state, {\n  query\n}) => ({ ...state,\n  query\n});\nconst reducer = {\n  [types.ADD_REPO]: addRepo,\n  [types.REMOVE_REPO]: removeRepo,\n  [types.SET_RELEASE_NOTES]: setReleaseNotes,\n  [types.SET_QUERY]: setQuery,\n  ...getLatestReleaseReducer,\n  ...getResultsReducer\n};\nexport default ((state = initialState, action = {}) => reducer[action.type] ? reducer[action.type](state, action) : state);","map":{"version":3,"sources":["/Users/JGhidossi/Downloads/lumanu-interview/src/modules/search/reducer.js"],"names":["getLatestReleaseReducer","getResultsReducer","types","initialState","loaders","releaseLoading","queryLoading","releaseNotes","repos","JSON","parse","localStorage","getItem","results","query","addRepo","state","repo","data","setItem","stringify","removeRepo","index","slice","setReleaseNotes","notes","body","setQuery","reducer","ADD_REPO","REMOVE_REPO","SET_RELEASE_NOTES","SET_QUERY","action","type"],"mappings":";;AAAA,OAAOA,uBAAP,MAAoC,8BAApC;AACA,OAAOC,iBAAP,MAA8B,uBAA9B;AACA,OAAOC,KAAP,MAAkB,SAAlB;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,OAAO,EAAE;AACLC,IAAAA,cAAc,EAAE,KADX;AAELC,IAAAA,YAAY,EAAE;AAFT,GADQ;AAKjBC,EAAAA,YAAY,EAAE,IALG;AAMjBC,EAAAA,KAAK,iBAAEC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAX,CAAF,qDAA+C,EANnC;AAOjBC,EAAAA,OAAO,EAAE,EAPQ;AAQjBC,EAAAA,KAAK,EAAE;AARU,CAArB;AAWA,OAAO,MAAMC,OAAO,GAAG,CAACC,KAAD,EAAQ;AAACC,EAAAA;AAAD,CAAR,KAAmB;AACtC,QAAMT,KAAK,GAAG,CAAC,GAAGQ,KAAK,CAACR,KAAV,EAAiB;AAACU,IAAAA,IAAI,EAAED;AAAP,GAAjB,CAAd;AACAN,EAAAA,YAAY,CAACQ,OAAb,CAAqB,OAArB,EAA8BV,IAAI,CAACW,SAAL,CAAeZ,KAAf,CAA9B;AACA,SAAQ,EACJ,GAAGQ,KADC;AAEJR,IAAAA;AAFI,GAAR;AAIH,CAPM;AASP,OAAO,MAAMa,UAAU,GAAG,CAACL,KAAD,EAAQ;AAACM,EAAAA;AAAD,CAAR,KAAoB;AAC1C,QAAMd,KAAK,GAAG,CAAC,GAAGQ,KAAK,CAACR,KAAN,CAAYe,KAAZ,CAAkB,CAAlB,EAAqBD,KAArB,CAAJ,EAAiC,GAAGN,KAAK,CAACR,KAAN,CAAYe,KAAZ,CAAkBD,KAAK,GAAG,CAA1B,CAApC,CAAd;AACAX,EAAAA,YAAY,CAACQ,OAAb,CAAqB,OAArB,EAA8BV,IAAI,CAACW,SAAL,CAAeZ,KAAf,CAA9B;AACA,SAAQ,EACJ,GAAGQ,KADC;AAEJR,IAAAA;AAFI,GAAR;AAIH,CAPM;AASP,OAAO,MAAMgB,eAAe,GAAG,CAACR,KAAD,EAAQ;AAACM,EAAAA;AAAD,CAAR,MAAqB,EAAC,GAAGN,KAAJ;AAAWT,EAAAA,YAAY,EAAES,KAAK,CAACR,KAAN,CAAYc,KAAZ,EAAmBG,KAAnB,CAAyBC;AAAlD,CAArB,CAAxB;AAEP,OAAO,MAAMC,QAAQ,GAAG,CAACX,KAAD,EAAQ;AAACF,EAAAA;AAAD,CAAR,MAAqB,EAAC,GAAGE,KAAJ;AAAWF,EAAAA;AAAX,CAArB,CAAjB;AAEP,MAAMc,OAAO,GAAG;AACZ,GAAC1B,KAAK,CAAC2B,QAAP,GAAkBd,OADN;AAEZ,GAACb,KAAK,CAAC4B,WAAP,GAAqBT,UAFT;AAGZ,GAACnB,KAAK,CAAC6B,iBAAP,GAA2BP,eAHf;AAIZ,GAACtB,KAAK,CAAC8B,SAAP,GAAmBL,QAJP;AAKZ,KAAG3B,uBALS;AAMZ,KAAGC;AANS,CAAhB;AASA,gBAAe,CAACe,KAAK,GAAGb,YAAT,EAAuB8B,MAAM,GAAG,EAAhC,KAAuCL,OAAO,CAACK,MAAM,CAACC,IAAR,CAAP,GAAuBN,OAAO,CAACK,MAAM,CAACC,IAAR,CAAP,CAAqBlB,KAArB,EAA4BiB,MAA5B,CAAvB,GAA6DjB,KAAnH","sourcesContent":["import getLatestReleaseReducer from './reducer/get-latest-release';\nimport getResultsReducer from './reducer/get-results';\nimport types from './types';\n\nconst initialState = {\n    loaders: {\n        releaseLoading: false,\n        queryLoading: false,\n    },\n    releaseNotes: null,\n    repos: JSON.parse(localStorage.getItem('repos')) ?? [],\n    results: [],\n    query: '',\n};\n\nexport const addRepo = (state, {repo}) => {\n    const repos = [...state.repos, {data: repo}];\n    localStorage.setItem('repos', JSON.stringify(repos));\n    return ({\n        ...state,\n        repos,\n    });\n};\n\nexport const removeRepo = (state, {index}) => {\n    const repos = [...state.repos.slice(0, index), ...state.repos.slice(index + 1)];\n    localStorage.setItem('repos', JSON.stringify(repos));\n    return ({\n        ...state,\n        repos,\n    });\n};\n\nexport const setReleaseNotes = (state, {index}) => ({...state, releaseNotes: state.repos[index].notes.body});\n\nexport const setQuery = (state, {query}) => ({...state, query});\n\nconst reducer = {\n    [types.ADD_REPO]: addRepo,\n    [types.REMOVE_REPO]: removeRepo,\n    [types.SET_RELEASE_NOTES]: setReleaseNotes,\n    [types.SET_QUERY]: setQuery,\n    ...getLatestReleaseReducer,\n    ...getResultsReducer,\n};\n\nexport default (state = initialState, action = {}) => reducer[action.type] ? reducer[action.type](state, action) : state;\n"]},"metadata":{},"sourceType":"module"}