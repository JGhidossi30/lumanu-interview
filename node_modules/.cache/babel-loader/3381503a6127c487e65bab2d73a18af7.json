{"ast":null,"code":"import getResultsReducer from './reducer/get-results';\nimport types from './types';\nconst initialState = {\n  loaders: {\n    queryLoading: false\n  },\n  releaseNotes: '',\n  repos: JSON.parse(localStorage.getItem('repos')),\n  results: [],\n  query: ''\n};\nexport const addRepo = (state, {\n  repo\n}) => ({ ...state,\n  ...state.repos.push(repo),\n  repos: [...state.repos, repo]\n});\nexport const setQuery = (state, {\n  query\n}) => ({ ...state,\n  query\n});\nconst reducer = {\n  [types.SET_QUERY]: setQuery,\n  ...getResultsReducer\n};\nexport default ((state = initialState, action = {}) => reducer[action.type] ? reducer[action.type](state, action) : state);","map":{"version":3,"sources":["/Users/JGhidossi/Downloads/lumanu-interview/src/modules/search/reducer.js"],"names":["getResultsReducer","types","initialState","loaders","queryLoading","releaseNotes","repos","JSON","parse","localStorage","getItem","results","query","addRepo","state","repo","push","setQuery","reducer","SET_QUERY","action","type"],"mappings":"AAAA,OAAOA,iBAAP,MAA8B,uBAA9B;AACA,OAAOC,KAAP,MAAkB,SAAlB;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,OAAO,EAAE;AACLC,IAAAA,YAAY,EAAE;AADT,GADQ;AAIjBC,EAAAA,YAAY,EAAE,EAJG;AAKjBC,EAAAA,KAAK,EAAEC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAX,CALU;AAMjBC,EAAAA,OAAO,EAAE,EANQ;AAOjBC,EAAAA,KAAK,EAAE;AAPU,CAArB;AAUA,OAAO,MAAMC,OAAO,GAAG,CAACC,KAAD,EAAQ;AAACC,EAAAA;AAAD,CAAR,MAAoB,EACvC,GAAGD,KADoC;AAEvC,KAAGA,KAAK,CAACR,KAAN,CAAYU,IAAZ,CAAiBD,IAAjB,CAFoC;AAGvCT,EAAAA,KAAK,EAAE,CAAC,GAAGQ,KAAK,CAACR,KAAV,EAAiBS,IAAjB;AAHgC,CAApB,CAAhB;AAMP,OAAO,MAAME,QAAQ,GAAG,CAACH,KAAD,EAAQ;AAACF,EAAAA;AAAD,CAAR,MAAqB,EAAC,GAAGE,KAAJ;AAAWF,EAAAA;AAAX,CAArB,CAAjB;AAEP,MAAMM,OAAO,GAAG;AACZ,GAACjB,KAAK,CAACkB,SAAP,GAAmBF,QADP;AAEZ,KAAGjB;AAFS,CAAhB;AAKA,gBAAe,CAACc,KAAK,GAAGZ,YAAT,EAAuBkB,MAAM,GAAG,EAAhC,KAAuCF,OAAO,CAACE,MAAM,CAACC,IAAR,CAAP,GAAuBH,OAAO,CAACE,MAAM,CAACC,IAAR,CAAP,CAAqBP,KAArB,EAA4BM,MAA5B,CAAvB,GAA6DN,KAAnH","sourcesContent":["import getResultsReducer from './reducer/get-results';\nimport types from './types';\n\nconst initialState = {\n    loaders: {\n        queryLoading: false,\n    },\n    releaseNotes: '',\n    repos: JSON.parse(localStorage.getItem('repos')),\n    results: [],\n    query: '',\n};\n\nexport const addRepo = (state, {repo}) => ({\n    ...state,\n    ...state.repos.push(repo),\n    repos: [...state.repos, repo]\n});\n\nexport const setQuery = (state, {query}) => ({...state, query});\n\nconst reducer = {\n    [types.SET_QUERY]: setQuery,\n    ...getResultsReducer,\n};\n\nexport default (state = initialState, action = {}) => reducer[action.type] ? reducer[action.type](state, action) : state;\n"]},"metadata":{},"sourceType":"module"}