{"ast":null,"code":"import { routerMiddleware, routerReducer } from 'react-router-redux';\nimport { applyMiddleware, combineReducers, compose, createStore } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport createSagaMiddleware from 'redux-saga';\nimport { all } from 'redux-saga/effects';\nexport default ((reducers, sagas, history, initialState = {}, additionalMiddleware = [], clearStateActionName) => {\n  const appReducer = combineReducers({\n    routing: routerReducer,\n    ...reducers\n  });\n\n  const rootSaga = function* rootSaga() {\n    yield all([...sagas]);\n  };\n\n  const sagaMiddleware = createSagaMiddleware();\n  let middleware = [routerMiddleware(history), sagaMiddleware, ...additionalMiddleware];\n\n  if (process.env.NODE_ENV !== 'production') {\n    middleware = [...middleware, createLogger({\n      collapsed: true\n    })];\n  }\n\n  const composeEnhancers = process.env.NODE_ENV !== 'production' && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n  const store = createStore((state, action) => {\n    // allows us to reset state\n    if (action.type === clearStateActionName) {\n      const newState = appReducer({}, {}); // eslint-disable-line\n\n      return { ...newState,\n        content: state.content,\n        browser: { ...state.browser,\n          loading: false\n        }\n      };\n    }\n\n    return appReducer(state, action);\n  }, initialState, composeEnhancers(applyMiddleware(...middleware)));\n  sagaMiddleware.run(rootSaga);\n  return store;\n});","map":{"version":3,"sources":["/Users/JGhidossi/Downloads/lumanu-interview/src/store/configure-store-boilerplate.js"],"names":["routerMiddleware","routerReducer","applyMiddleware","combineReducers","compose","createStore","createLogger","createSagaMiddleware","all","reducers","sagas","history","initialState","additionalMiddleware","clearStateActionName","appReducer","routing","rootSaga","sagaMiddleware","middleware","process","env","NODE_ENV","collapsed","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","store","state","action","type","newState","content","browser","loading","run"],"mappings":"AAAA,SAAQA,gBAAR,EAA0BC,aAA1B,QAA8C,oBAA9C;AACA,SAAQC,eAAR,EAAyBC,eAAzB,EAA0CC,OAA1C,EAAmDC,WAAnD,QAAsE,OAAtE;AACA,SAAQC,YAAR,QAA2B,cAA3B;AACA,OAAOC,oBAAP,MAAiC,YAAjC;AACA,SAAQC,GAAR,QAAkB,oBAAlB;AAEA,gBAAe,CACXC,QADW,EAEXC,KAFW,EAGXC,OAHW,EAIXC,YAAY,GAAG,EAJJ,EAKXC,oBAAoB,GAAG,EALZ,EAMXC,oBANW,KAOV;AACD,QAAMC,UAAU,GAAGZ,eAAe,CAAC;AAC/Ba,IAAAA,OAAO,EAAEf,aADsB;AAE/B,OAAGQ;AAF4B,GAAD,CAAlC;;AAKA,QAAMQ,QAAQ,GAAG,UAAUA,QAAV,GAAqB;AAClC,UAAMT,GAAG,CAAC,CAAC,GAAGE,KAAJ,CAAD,CAAT;AACH,GAFD;;AAIA,QAAMQ,cAAc,GAAGX,oBAAoB,EAA3C;AAEA,MAAIY,UAAU,GAAG,CACbnB,gBAAgB,CAACW,OAAD,CADH,EAEbO,cAFa,EAGb,GAAGL,oBAHU,CAAjB;;AAMA,MAAIO,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACvCH,IAAAA,UAAU,GAAG,CAAC,GAAGA,UAAJ,EAAgBb,YAAY,CAAC;AAACiB,MAAAA,SAAS,EAAE;AAAZ,KAAD,CAA5B,CAAb;AACH;;AAED,QAAMC,gBAAgB,GAAIJ,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,IACnBG,MAAM,CAACC,oCADW,IAElBtB,OAFP;AAIA,QAAMuB,KAAK,GAAGtB,WAAW,CACrB,CAACuB,KAAD,EAAQC,MAAR,KAAmB;AACf;AACA,QAAIA,MAAM,CAACC,IAAP,KAAgBhB,oBAApB,EAA0C;AACtC,YAAMiB,QAAQ,GAAGhB,UAAU,CAAC,EAAD,EAAK,EAAL,CAA3B,CADsC,CACD;;AACrC,aAAO,EACH,GAAGgB,QADA;AAEHC,QAAAA,OAAO,EAAEJ,KAAK,CAACI,OAFZ;AAGHC,QAAAA,OAAO,EAAE,EAAC,GAAGL,KAAK,CAACK,OAAV;AAAmBC,UAAAA,OAAO,EAAE;AAA5B;AAHN,OAAP;AAKH;;AACD,WAAOnB,UAAU,CAACa,KAAD,EAAQC,MAAR,CAAjB;AACH,GAZoB,EAarBjB,YAbqB,EAcrBY,gBAAgB,CAACtB,eAAe,CAAC,GAAGiB,UAAJ,CAAhB,CAdK,CAAzB;AAiBAD,EAAAA,cAAc,CAACiB,GAAf,CAAmBlB,QAAnB;AAEA,SAAOU,KAAP;AACH,CArDD","sourcesContent":["import {routerMiddleware, routerReducer} from 'react-router-redux';\nimport {applyMiddleware, combineReducers, compose, createStore,} from 'redux';\nimport {createLogger} from 'redux-logger';\nimport createSagaMiddleware from 'redux-saga';\nimport {all} from 'redux-saga/effects';\n\nexport default (\n    reducers,\n    sagas,\n    history,\n    initialState = {},\n    additionalMiddleware = [],\n    clearStateActionName,\n) => {\n    const appReducer = combineReducers({\n        routing: routerReducer,\n        ...reducers,\n    });\n\n    const rootSaga = function* rootSaga() {\n        yield all([...sagas]);\n    };\n\n    const sagaMiddleware = createSagaMiddleware();\n\n    let middleware = [\n        routerMiddleware(history),\n        sagaMiddleware,\n        ...additionalMiddleware,\n    ];\n\n    if (process.env.NODE_ENV !== 'production') {\n        middleware = [...middleware, createLogger({collapsed: true})];\n    }\n\n    const composeEnhancers = (process.env.NODE_ENV !== 'production'\n        && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__)\n        || compose;\n\n    const store = createStore(\n        (state, action) => {\n            // allows us to reset state\n            if (action.type === clearStateActionName) {\n                const newState = appReducer({}, {}); // eslint-disable-line\n                return {\n                    ...newState,\n                    content: state.content,\n                    browser: {...state.browser, loading: false},\n                };\n            }\n            return appReducer(state, action);\n        },\n        initialState,\n        composeEnhancers(applyMiddleware(...middleware)),\n    );\n\n    sagaMiddleware.run(rootSaga);\n\n    return store;\n};\n"]},"metadata":{},"sourceType":"module"}